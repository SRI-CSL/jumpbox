= JumpBox Design =

This document details the design of the JumpBox which is a combination of a C-based daemon (djb)
and a browser plugin.

== Authors ==

 Ian Mason	SRI International	 <ian.mason@sri.com>
 Jeroen Massar 	Farsight Security, Inc.	 <massar@fsi.io>

== Javascript details ==

Details about the current Javascript (plugin) implementation are to be found in:
 plugin/chrome/background.js
which contains an introduction on how these requests work

== Jump Box API ==

djb (JumpBox server) provides a webinterface at http://localhost:6543.

=== Proxy requests ===

StegoTorus sends requests to http://<something>/<url> using djb as a HTTP proxy (at localhost:6543).
As requests landing at djb are not pointing at http://localhost djb knows these are requests not for djb
but those that it needs to proxy. This avoids the need to modify any HTTP client (like StegoTorus) using this setup.

As we listen on localhost we do not have to worry (too much) that other clients use our HTTP proxy.

djb accepts the request from StegoTorus and forwards this to plugins that requests next packets.

==== Proxy Pull ====

For requesting a packet from djb we have a 'pull' request (GET http://localhost:6543/pull/). 

When that URL is hit, djb returns content of the Stegotorus Client's request with the following
additional headers:

* DJB-URI: <URI of the Stegotorus Request>
* DJB-Method: <HTTP Method of Stegotorus Request>
* DJB-Content-Type: <Content-Type of StegoTorus Request> (opt)
* DJB-Cookie: <this should be *instead of* any cookie header in the Stegotorus Client request> (opt)
* DJB-SeqNo: Packet Sequence Number (assigned by djb)

At this point the request is forwarded by the plugin, when it receives an answer it pushes the answer
to djb using a 'push' request.

==== Proxy Push ====

The plugin can return data using a 'POST http://localhost:6543/push/' along with the following headers:

* DJB-HTTPCode: <errorcode>
* DJB-HTTPmsg: /* XXX Check if we can get this from Chrome's response.status or so? */
* DJB-Set-Cookie: <Cookie for this request> (opt)
* DJB-SeqNo: Packet Sequence Number (assigned by djb)

The SeqNo is used to match this 'answer' up to the actual request, so that we can pass it to the right
StegoTorus client (there might be multiple).

The DJB-Set-Cookie header is translated into a Set-Cookie to allow this header to be forwarded by the plugin.

=== Rendezvous ===

/rendezvous/<apicalls>

==== /reset/ ====

Resets all internal state to "zero"

==== /gen_request/ ====

This is a POST request, the contents of which is the name of the mod_freedom server.
In response to this request djb will:

   * Generate and *remember* a random password of length, DEFIANT_REQ_REP_PASSWORD_LENGTH, and
   * Using the password and the server name generate the URL (using PBC) of a mod_freedom request.

The response to this request will be the above constructed URL.

==== /image/ ====

POST the stegged onion image that mod_freedom served in response to the request generated 
by the preceeding /gen_request/. The actual onion must be extracted onion out of the image using password
generated and stored, again in the  preceeding /gen_request/.

This onion is signed, and so this signature must be verified.  It returns json, which akin to a 
/peel/ request contains the local URL of the image to served by mod_freedom, as well as
the results of the verification process.

==== /peel/ ====

These are POSTs of json that return json.

The incoming json should include any necessary solution to puzzle.

The outgoing json should include the current state, the type of the next layer
if appropriate, and any additional info, for example the local url of a CAPTCHA
or the progress if a POW search. More specifically:
 
json from jumbox to plugin:   

 { onion_type: "type of onion",  
   info: "onion information",  
   status: "previous outcomes for displaying"  }
 
info can in the case of a 
    POW be a number (percent of search completed)
    CAPTCHA be the file:// of the image
 
json from plugin to jumbox:  {} or { action: "either the answer or a query" }


Eventually the result of n *successful* /peel/ requests should return a net (part
of the additional info).  This net is then submitted to the ACS dance described in
more detail below.

==== /file/ ====

The File API is used to retrieve a file from the temporary directory.
This is typically used to retrieve the captchas.

URLs are typically of the format /file/tmp/outguess_embed?????????

=== Preferences ===

To communicate the preferences set in the plugin to djb we do a POST /preferences/.
DJB then parses the provided JSON and updates its settings.

=== ACS ===

ACS has two phases for the consideration of this document: initial + redirect.
The third phase 'bridge' is performed by providing the NET details to StegoTorus and starting it.

For the browser plugin these phases are transparent as the proxy /pull/ + /push/ API is used.

ACS status is convened with a simple JSON message in the form:
  {
     "status": "(ok|error|done)",
     "message": "<message>",
  }

==== ACS Setup ====

The browser gathers a NET, either through rendezvous or a textfield.

It provides djb this NET with a 'POST /acs/setup/' (textfield) or
with acs_set_net() directly from rendezvous.

This will result in a ACS status, after this, the plugin will start
asking about progress of the Dance.

The browser does not need to know the contents of the NET.

==== ACS status ====

The browser asks about the progress of the Dance by sending a
'GET /acs/progress/'

The result is a ACS result. The browser will repeat this question
till it gets an 'error' or 'done' back.

The request blocks till the message changes.

The first request to this URL triggers the Dance which is directed
by djb.

==== ACS Initial + Redirect ====

The first phase is ACS Initial. djb injects a request for the Initial
URL into the normal proxy /pull/ cycle and picks the answer back out of it.

When Initial is complete, it waits a bit, updating the status to reflect this.
It then executes the Redirect phase in the same way as the Initial phase.

When Redirect completes it signals 'done' through the progress indicator.

=== Tor over StegoTorus over Jumpbox through DGW ===

At this point Tor over StegoTorus over JumpBox (Proxy) can be started as all
details are available.

To do this, a call to /start/ is made, a ACS response is used to signal the status.
We use the preferences set to construct the relevant exec commands.

=== djb HTTP Errors ===

djb reports errors using standard HTTP errorcodes, As a reference, some are listed here:

200 = All okay

404 = Not Found, when something cannot be found (eg a push, but the corresponding pull cannot be found)

408 = Request Timeout, typically for 'pull' when for a long time no request needed to be sent.
      The plugin can retry the request at a later point.

504 = Parameter missing

555 = Request not Made; used by the JumpBox plugin to report that a request was not made by the browser.

